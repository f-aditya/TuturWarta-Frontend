/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: t4V3p66SUxNrC7VqQmN1Jm
// Component: 75DgtyuXWbWG

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import NavLinkCategory from "../../NavLinkCategory"; // plasmic-import: U2f6rDMchBD0/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_library_tailwind_3_4_colors_css from "../library_tailwind_3_4_color_tokens/plasmic.module.css"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: t4V3p66SUxNrC7VqQmN1Jm/projectcss
import sty from "./PlasmicNavbarTuturWarta.module.css"; // plasmic-import: 75DgtyuXWbWG/css

createPlasmicElementProxy;

export type PlasmicNavbarTuturWarta__VariantMembers = {};
export type PlasmicNavbarTuturWarta__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavbarTuturWarta__VariantsArgs;
export const PlasmicNavbarTuturWarta__VariantProps =
  new Array<VariantPropType>();

export type PlasmicNavbarTuturWarta__ArgsType = { activePageSlug?: string };
type ArgPropType = keyof PlasmicNavbarTuturWarta__ArgsType;
export const PlasmicNavbarTuturWarta__ArgProps = new Array<ArgPropType>(
  "activePageSlug"
);

export type PlasmicNavbarTuturWarta__OverridesType = {
  root?: Flex__<"div">;
  navbarHeader?: Flex__<"div">;
  socialLink?: Flex__<"div">;
  users2?: Flex__<"a"> & Partial<LinkProps>;
  users?: Flex__<typeof PlasmicImg__>;
  freeBox?: Flex__<"div">;
  navbarConten?: Flex__<"div">;
  logoTuturWarta?: Flex__<"a"> & Partial<LinkProps>;
  logo?: Flex__<typeof PlasmicImg__>;
  category?: Flex__<"div">;
  home?: Flex__<typeof NavLinkCategory>;
  news?: Flex__<typeof NavLinkCategory>;
  ekonomi?: Flex__<typeof NavLinkCategory>;
  techno?: Flex__<typeof NavLinkCategory>;
  otomotif?: Flex__<typeof NavLinkCategory>;
  sport?: Flex__<typeof NavLinkCategory>;
  lifestyle?: Flex__<typeof NavLinkCategory>;
  celebrity?: Flex__<typeof NavLinkCategory>;
  travel?: Flex__<typeof NavLinkCategory>;
  healt?: Flex__<typeof NavLinkCategory>;
  edukasi?: Flex__<typeof NavLinkCategory>;
  muslim?: Flex__<typeof NavLinkCategory>;
};

export interface DefaultNavbarTuturWartaProps {
  activePageSlug?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavbarTuturWarta__RenderFunc(props: {
  variants: PlasmicNavbarTuturWarta__VariantsArgs;
  args: PlasmicNavbarTuturWarta__ArgsType;
  overrides: PlasmicNavbarTuturWarta__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          activePageSlug: "/"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_library_tailwind_3_4_colors_css.plasmic_tokens,
        plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"navbarHeader"}
        data-plasmic-override={overrides.navbarHeader}
        className={classNames(projectcss.all, sty.navbarHeader)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"socialLink"}
          data-plasmic-override={overrides.socialLink}
          hasGap={true}
          className={classNames(projectcss.all, sty.socialLink)}
        >
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__gfH6Q
            )}
            component={Link}
            href={"https://www.facebook.com/profile.php?id=100064992493386"}
            platform={"nextjs"}
            target={"_blank"}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__weuvU)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"30px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/tutur_warta_frontend/images/fbPng.png",
                fullWidth: 122,
                fullHeight: 122,
                aspectRatio: undefined
              }}
            />
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__qYhTi
            )}
            component={Link}
            href={"https://www.instagram.com/farid_aditya_parma/"}
            platform={"nextjs"}
            target={"_blank"}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__rLg1H)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"30px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/tutur_warta_frontend/images/igPng.png",
                fullWidth: 121,
                fullHeight: 122,
                aspectRatio: undefined
              }}
            />
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__kDd5P
            )}
            component={Link}
            href={"https://x.com/FaridAdity36476"}
            platform={"nextjs"}
            target={"_blank"}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__pXdEa)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"30px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/tutur_warta_frontend/images/twitterXPng.png",
                fullWidth: 121,
                fullHeight: 121,
                aspectRatio: undefined
              }}
            />
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__jBpvf
            )}
            component={Link}
            href={"https://www.youtube.com/@suka_nonton"}
            platform={"nextjs"}
            target={"_blank"}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__aJTj)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"30px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/tutur_warta_frontend/images/youtubePng.png",
                fullWidth: 122,
                fullHeight: 122,
                aspectRatio: undefined
              }}
            />
          </PlasmicLink__>
        </Stack__>
        <PlasmicLink__
          data-plasmic-name={"users2"}
          data-plasmic-override={overrides.users2}
          className={classNames(projectcss.all, projectcss.a, sty.users2)}
          component={Link}
          platform={"nextjs"}
        >
          <PlasmicImg__
            data-plasmic-name={"users"}
            data-plasmic-override={overrides.users}
            alt={""}
            className={classNames(sty.users)}
            displayHeight={"30px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: "/plasmic/tutur_warta_frontend/images/users02Png5.png",
              fullWidth: 412,
              fullHeight: 413,
              aspectRatio: undefined
            }}
          />
        </PlasmicLink__>
      </div>
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      />

      <div
        data-plasmic-name={"navbarConten"}
        data-plasmic-override={overrides.navbarConten}
        className={classNames(projectcss.all, sty.navbarConten)}
      >
        <PlasmicLink__
          data-plasmic-name={"logoTuturWarta"}
          data-plasmic-override={overrides.logoTuturWarta}
          className={classNames(
            projectcss.all,
            projectcss.a,
            sty.logoTuturWarta
          )}
          component={Link}
          href={`/`}
          platform={"nextjs"}
        >
          <PlasmicImg__
            data-plasmic-name={"logo"}
            data-plasmic-override={overrides.logo}
            alt={""}
            className={classNames(sty.logo)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"191px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/tutur_warta_frontend/images/tuturWartaPng.png",
              fullWidth: 709,
              fullHeight: 209,
              aspectRatio: undefined
            }}
          />
        </PlasmicLink__>
        <Stack__
          as={"div"}
          data-plasmic-name={"category"}
          data-plasmic-override={overrides.category}
          hasGap={true}
          className={classNames(projectcss.all, sty.category)}
        >
          <NavLinkCategory
            data-plasmic-name={"home"}
            data-plasmic-override={overrides.home}
            className={classNames("__wab_instance", sty.home)}
            isActive={(() => {
              try {
                return $props.activePageSlug === "/";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()}
            isActiveTrue={(() => {
              try {
                return $props.activePageSlug === "/";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
            slug={"/"}
          />

          <NavLinkCategory
            data-plasmic-name={"news"}
            data-plasmic-override={overrides.news}
            className={classNames("__wab_instance", sty.news)}
            isActive={(() => {
              try {
                return $props.activePageSlug === "/News";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()}
            slug={"/News"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__s5AdF
              )}
            >
              {"News"}
            </div>
          </NavLinkCategory>
          <NavLinkCategory
            data-plasmic-name={"ekonomi"}
            data-plasmic-override={overrides.ekonomi}
            className={classNames("__wab_instance", sty.ekonomi)}
            isActive={(() => {
              try {
                return $props.activePageSlug === "/Ekonomi";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()}
            slug={"/Ekonomi"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__waegA
              )}
            >
              {"Ekonomi"}
            </div>
          </NavLinkCategory>
          <NavLinkCategory
            data-plasmic-name={"techno"}
            data-plasmic-override={overrides.techno}
            className={classNames("__wab_instance", sty.techno)}
            isActive={(() => {
              try {
                return $props.activePageSlug === "/Techno";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()}
            slug={"/Techno"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tnoUk
              )}
            >
              {"Techno"}
            </div>
          </NavLinkCategory>
          <NavLinkCategory
            data-plasmic-name={"otomotif"}
            data-plasmic-override={overrides.otomotif}
            className={classNames("__wab_instance", sty.otomotif)}
            isActive={(() => {
              try {
                return $props.activePageSlug === "/Otomotif";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()}
            slug={"/Otomotif"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__iEo6
              )}
            >
              {"Otomotif"}
            </div>
          </NavLinkCategory>
          <NavLinkCategory
            data-plasmic-name={"sport"}
            data-plasmic-override={overrides.sport}
            className={classNames("__wab_instance", sty.sport)}
            isActive={(() => {
              try {
                return $props.activePageSlug === "/Sport";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()}
            slug={"/Sport"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xD2Ti
              )}
            >
              {"Sport"}
            </div>
          </NavLinkCategory>
          <NavLinkCategory
            data-plasmic-name={"lifestyle"}
            data-plasmic-override={overrides.lifestyle}
            className={classNames("__wab_instance", sty.lifestyle)}
            isActive={(() => {
              try {
                return $props.activePageSlug === "/Lifestyle";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()}
            isActiveTrue={(() => {
              try {
                return $props.activePageSlug === "/Lifestyle";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "isActiveTrue";
                }
                throw e;
              }
            })()}
            slug={"/Lifestyle"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__aUd6A
              )}
            >
              {"lifestyle"}
            </div>
          </NavLinkCategory>
          <NavLinkCategory
            data-plasmic-name={"celebrity"}
            data-plasmic-override={overrides.celebrity}
            className={classNames("__wab_instance", sty.celebrity)}
            isActive={(() => {
              try {
                return $props.activePageSlug === "/Celebrity";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()}
            slug={"/Celebrity"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uIyFi
              )}
            >
              {"Celebrity"}
            </div>
          </NavLinkCategory>
          <NavLinkCategory
            data-plasmic-name={"travel"}
            data-plasmic-override={overrides.travel}
            className={classNames("__wab_instance", sty.travel)}
            isActive={(() => {
              try {
                return $props.activePageSlug === "/Travel";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()}
            slug={"/Travel"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wmLh
              )}
            >
              {"Travel"}
            </div>
          </NavLinkCategory>
          <NavLinkCategory
            data-plasmic-name={"healt"}
            data-plasmic-override={overrides.healt}
            className={classNames("__wab_instance", sty.healt)}
            isActive={(() => {
              try {
                return $props.activePageSlug === "/Healt";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()}
            slug={"/Healt"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___9Q25O
              )}
            >
              {"Healt"}
            </div>
          </NavLinkCategory>
          <NavLinkCategory
            data-plasmic-name={"edukasi"}
            data-plasmic-override={overrides.edukasi}
            className={classNames("__wab_instance", sty.edukasi)}
            isActive={(() => {
              try {
                return $props.activePageSlug === "/Edukasi";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()}
            slug={"/Edukasi"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pftZs
              )}
            >
              {"Edukasi"}
            </div>
          </NavLinkCategory>
          <NavLinkCategory
            data-plasmic-name={"muslim"}
            data-plasmic-override={overrides.muslim}
            className={classNames("__wab_instance", sty.muslim)}
            isActive={(() => {
              try {
                return $props.activePageSlug === "/Muslim";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()}
            isActiveTrue={(() => {
              try {
                return undefined;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
            slug={"/Muslim"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gG5Ea
              )}
            >
              {"Muslim"}
            </div>
          </NavLinkCategory>
        </Stack__>
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbarHeader",
    "socialLink",
    "users2",
    "users",
    "freeBox",
    "navbarConten",
    "logoTuturWarta",
    "logo",
    "category",
    "home",
    "news",
    "ekonomi",
    "techno",
    "otomotif",
    "sport",
    "lifestyle",
    "celebrity",
    "travel",
    "healt",
    "edukasi",
    "muslim"
  ],
  navbarHeader: ["navbarHeader", "socialLink", "users2", "users"],
  socialLink: ["socialLink"],
  users2: ["users2", "users"],
  users: ["users"],
  freeBox: ["freeBox"],
  navbarConten: [
    "navbarConten",
    "logoTuturWarta",
    "logo",
    "category",
    "home",
    "news",
    "ekonomi",
    "techno",
    "otomotif",
    "sport",
    "lifestyle",
    "celebrity",
    "travel",
    "healt",
    "edukasi",
    "muslim"
  ],
  logoTuturWarta: ["logoTuturWarta", "logo"],
  logo: ["logo"],
  category: [
    "category",
    "home",
    "news",
    "ekonomi",
    "techno",
    "otomotif",
    "sport",
    "lifestyle",
    "celebrity",
    "travel",
    "healt",
    "edukasi",
    "muslim"
  ],
  home: ["home"],
  news: ["news"],
  ekonomi: ["ekonomi"],
  techno: ["techno"],
  otomotif: ["otomotif"],
  sport: ["sport"],
  lifestyle: ["lifestyle"],
  celebrity: ["celebrity"],
  travel: ["travel"],
  healt: ["healt"],
  edukasi: ["edukasi"],
  muslim: ["muslim"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbarHeader: "div";
  socialLink: "div";
  users2: "a";
  users: typeof PlasmicImg__;
  freeBox: "div";
  navbarConten: "div";
  logoTuturWarta: "a";
  logo: typeof PlasmicImg__;
  category: "div";
  home: typeof NavLinkCategory;
  news: typeof NavLinkCategory;
  ekonomi: typeof NavLinkCategory;
  techno: typeof NavLinkCategory;
  otomotif: typeof NavLinkCategory;
  sport: typeof NavLinkCategory;
  lifestyle: typeof NavLinkCategory;
  celebrity: typeof NavLinkCategory;
  travel: typeof NavLinkCategory;
  healt: typeof NavLinkCategory;
  edukasi: typeof NavLinkCategory;
  muslim: typeof NavLinkCategory;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbarTuturWarta__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbarTuturWarta__VariantsArgs;
    args?: PlasmicNavbarTuturWarta__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbarTuturWarta__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavbarTuturWarta__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavbarTuturWarta__ArgProps,
          internalVariantPropNames: PlasmicNavbarTuturWarta__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavbarTuturWarta__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbarTuturWarta";
  } else {
    func.displayName = `PlasmicNavbarTuturWarta.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbarTuturWarta = Object.assign(
  // Top-level PlasmicNavbarTuturWarta renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarHeader: makeNodeComponent("navbarHeader"),
    socialLink: makeNodeComponent("socialLink"),
    users2: makeNodeComponent("users2"),
    users: makeNodeComponent("users"),
    freeBox: makeNodeComponent("freeBox"),
    navbarConten: makeNodeComponent("navbarConten"),
    logoTuturWarta: makeNodeComponent("logoTuturWarta"),
    logo: makeNodeComponent("logo"),
    category: makeNodeComponent("category"),
    home: makeNodeComponent("home"),
    news: makeNodeComponent("news"),
    ekonomi: makeNodeComponent("ekonomi"),
    techno: makeNodeComponent("techno"),
    otomotif: makeNodeComponent("otomotif"),
    sport: makeNodeComponent("sport"),
    lifestyle: makeNodeComponent("lifestyle"),
    celebrity: makeNodeComponent("celebrity"),
    travel: makeNodeComponent("travel"),
    healt: makeNodeComponent("healt"),
    edukasi: makeNodeComponent("edukasi"),
    muslim: makeNodeComponent("muslim"),

    // Metadata about props expected for PlasmicNavbarTuturWarta
    internalVariantProps: PlasmicNavbarTuturWarta__VariantProps,
    internalArgProps: PlasmicNavbarTuturWarta__ArgProps
  }
);

export default PlasmicNavbarTuturWarta;
/* prettier-ignore-end */
